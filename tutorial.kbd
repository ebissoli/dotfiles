#| --------------------------------------------------------------------------

                              KMonad: Guided tour

  Welcome to the KMonad configuration tutorial. This document aims to explain:
  1. The configuration syntax
  2. The required information
  3. All possible configuration options

  This document should be a runnable configuration, so with some tweaks to the
  `defcfg` block (see below) you should be able to try out all the examples
  interactively.

  -------------------------------------------------------------------------- |#


#| --------------------------------------------------------------------------

                     Basic syntax: comments and parentheses

  KMonad's configuration language is styled on various lisps, like scheme or
  Common Lisp. In a lisp, every statement is entered between '(' and ')'s. If
  you are more used to Fortan style languages (python, ruby, C, Java, etc.), the
  change is quite straightforward: the function name moves into the parentheses,
  and you don't use commas to separate arguments. I.e.

  This:     my_function(a, 3, "Alakazam")
  Becomes:  (my_function a 3 "Alakazam")

  The reason for this is because Lisp-style languages are very easy to parse and
  write syntax-highlighters for.

  We also provide standard Lisp syntax for comments:
  - block comments between: #| and its reverse
  - line comments following: ;;

  Unlike standard lisp, a single ; does not denote a comment, but instead the
  keycode for semicolon.

  Also, as you might have noticed, whitespace is possible anywhere.

  To check for syntax errors while editing, invoke kmonad with the -d option.
  -------------------------------------------------------------------------- |#


#| --------------------------------------------------------------------------
                         Necessary: the `defcfg` block

  There are a few bits of information that are required to be present in a
  KMonad configuration file. One of these is the existence of exactly 1 `defcfg`
  statement. This statement is used to customize various configuration settings.
  Many of these settings have default values, but a minimal definition must
  include at least an 'input' field and an 'output' field. These describe how
  KMonad captures its inputs and how it emits its outputs.

  First, let's go over the optional, non-OS specific settings. Currently there is
  only 2:

  - fallthrough: `true` or `false`, defaults to `false`

    KMonad catches input events and tries to match them to various handlers. If
    it cannot match an event to any handler (for example, if it isn't included
    in the `defsrc` block, or if it is, but the current keymap does not map any
    buttons to it), then the event gets quietly ignored. If `fallthrough` is set
    to `true`, any unhandled events simply get reemitted.

  - allow-cmd: `true` or `false`, defaults to `false`

    If this is set to `false`, any action that runs a shell-command will simply
    log to `stdout` without ever running (log-level info). Don't ever enable
    this on a configuration that you do not trust, because:

      (cmd-button "rm -rf ~/*")

    is a thing. For more information on the `cmd-button' function, see the
    section on Command buttons below.

  There are also some optional OS specific settings that we support:

  - `cmp-seq': KEY, defaults to `RightAlt' (Linux X11 specific)

    This sets your compose key for Unicode input. For more information, as well
    as a workaround to also make this work on windows, see the section on
    Compose-key sequences below.

  - `cmp-seq-delay': NUMBER (in milliseconds)

    This sets a delay between each pressed key in a compose-key sequence.  Some
    environments may have troubles recognizing the key sequence if it's pressed
    too rapidly; if you experience any problems in this direction, you can try
    setting this value to `5' or `10' and see if that helps.

  Secondly, let's go over how to specify the `input` and `output` fields of a
  `defcfg` block. This differs between OS'es, and so do the capabilities of
  these interfaces.


  -- Linux ------

  In Linux we deal with input by performing an ioctl-grab on a specific
  device-file. This allows us to hook KMonad on the input of exactly 1 keyboard,
  and allows you to run multiple instances of KMonad for different keyboards. We
  make an input using:
    (device-file "/dev/input/by-id/my-keyboard-kbd")

  NOTE: Any valid path to a device-file will work, but it is recommended to use
  the 'by-id' directory, since these names will not change if you replug the
  device.

  We deal with output by creating a 'uinput' device. This requires that the
  'uinput' kernel module is loaded. The easiest way to ensure this is by calling
  'sudo modprobe uinput'. We create a uinput device using:
    (uinput-sink "name" "optional post-init command")


  -- Windows ----

  In Windows we do not get such fine-grained control. We use a low-level
  keyboard hook to intercept all non-injected keyboard events. There is
  currently an open issue to improve the RC-bindings used to capture windows
  keyevents, and if you have a better way to approach this issue, help is deeply
  appreciated. You specify a windows input using:
    (low-level-hook)

  Similarly, the output in Windows lacks the fine-grained control. We use the
  SendEvent API to emit key events directly to Windows. Since these are
  'artificial' events we won't end up catching them again by the
  `low-level-hook`. It is very likely that KMonad does not play well with other
  programs that capture keyboard input like AHK. You specify windows output using:
    (send-event-sink)


  -- Mac OS -----

  For Mac questions I suggest filing an issue and tagging @thoelze1, he wrote
  the MacOS API. However, input using:
    (iokit-name "optional product string")

  By default this should grab all keyboards, however if a product string is
  provided, KMonad will only capture those devices that match the provided
  product string. If you would like to provide a product string, you can run
  `make; ./list-keyboards' in c_src/mac to list the product strings of all
  connected keyboards.

  You initialize output on MacOS using:
    (kext)

  -------------------------------------------------------------------------- |#

(defcfg
  ;; For Linux
  input  (device-file "/dev/input/by-id/usb-Razer_Razer_BlackWidow_Ultimate_2013-event-kbd")
  output (uinput-sink "My KMonad output"
    ;; To understand the importance of the following line, see the section on
    ;; Compose-key sequences at the near-bottom of this file.
    "/run/current-system/sw/bin/sleep 1 && /run/current-system/sw/bin/setxkbmap -option compose:ralt")
  cmp-seq ralt    ;; Set the compose key to `RightAlt'
  cmp-seq-delay 5 ;; 5ms delay between each compose-key sequence press

  ;; For Windows
  ;; input  (low-level-hook)
  ;; output (send-event-sink)

  ;; For MacOS
  ;; input  (iokit-name "my-keyboard-product-string")
  ;; output (kext)

  ;; Comment this is you want unhandled events not to be emitted
  fallthrough true

  ;; Set this to false to disable any command-execution in KMonad
  allow-cmd true
)


#| --------------------------------------------------------------------------
                         Necessary: the `defsrc` block

  It is difficult to explain the `defsrc` block without immediately going into
  `deflayer` blocks as well. Essentially, KMonad maps input-events to various
  internal actions, many of which generate output events. The `defsrc` block
  explains the layout on which we specify our `deflayer`s down the line.

  It is important to realize that the `defsrc` block doesn't *necessarily* have
  to coincide with your actual input keyboard. You can specify a full 100%
  `defsrc` block, but only use a 40% keyboard. This will mean that every
  `deflayer` you specify will also have to match your 100% `defsrc`, and that
  your actual keyboard would be physically unable to trigger about 60% of your
  keymap, but it would be perfectly valid syntax.

  The dual of this (and more useful) is that it is also perfectly valid to only
  specify that part of your keyboard in `defsrc` that you want to remap. If you
  use a 100% keyboard, but don't want to remap the numpad at all you can simply
  leave the numpad out of your `defsrc`, and it should work just fine. In that
  particular case you probably want to set `fallthrough` to `true` in your
  `defcfg` block though.

  In the future we would like to provide support for multiple, named `defsrc`
  blocks, so that it becomes easier to specify various layers for just the
  numpad, for example, but at the moment any more or less than 1 `defsrc` block
  will result in an error.

  The layouting in the `defsrc` block is completely free, whitespace simply gets
  ignored. We strive to provide a name for every keycode that is no longer than
  4 characters, so we find that laying out your keymap in columns of 5 works out
  quite nicely (although wider columns will allow for more informative aliases,
  see below).

  Most keycodes should be obvious. If you are unsure, check
  './src/KMonad/Keyboard/Keycode.hs'. Every Keycode has a name corresponding to
  its Keycode name, but all lower-case and with the 'Key' prefix removed. There
  are also various aliases for Keycodes starting around line 350. If you are
  trying to bind a key and there is not a 4-letter alias, please file an issue,
  or better yet, a pull-request, and it will be added promptly.

  Also, you can consult './keymap/template/' for various input templates to use
  directly or to look up keycodes by position. Here we use the input-template
  for 'us_ansi_60.kbd'

  -------------------------------------------------------------------------- |#

        (defalias
        ba (layer-switch base))

                ;; (defalias
                ;; vi (layer-toggle vibliss))

                ;; (defalias
                ;; vi2 (layer-toggle vibliss2))
                (defalias
                  ink (layer-switch inklayer))

                (defalias
                  def (layer-switch base))

                (defalias
                meta (layer-toggle metabliss))

                (defalias
                symbol (layer-toggle symbolayer))

                (defalias
                number (layer-toggle numberlayer))

                (defalias
                utils (layer-toggle utilslayer))

                (defalias
                fn (layer-toggle fnlayer))

                (defalias
                caps (layer-toggle capslayer))

                (defalias
                super (layer-toggle superlayer))

                (defalias
                lsft (layer-toggle lsftlayer))

                        (defalias
                        c/ (tap-macro-release /))

                        (defalias
                        c[ (tap-macro-release [))

                        (defalias
                        cz (tap-macro-release z))

                        (defalias
                        cq (tap-macro-release q))

                        (defalias
                        ccap (tap-macro-release esc))

                        (defalias
                        ptap (tap-macro-release r))

                        (defalias
                        ntap (tap-macro-release l))

                        (defalias
                        fb (tap-macro RC-q 0 ))

                        (defalias
                        bb (tap-macro RC-q 1 ))

                        (defalias
                        fc (tap-macro RC-q 2 ))

                        (defalias
                        bc (tap-macro RC-q 3 ))

                        (defalias
                        fp (tap-macro RC-q 4 ))

                        (defalias
                        bp (tap-macro RC-q 5 ))

                        (defalias
                        bcc (tap-macro RC-q 6 ))

                        (defalias
                        fcc (tap-macro RC-q 7 ))

                        (defalias
                        bl (tap-macro RC-q 8 ))

                        (defalias
                        fl (tap-macro RC-q 9 ))

                        (defalias
                        bccc (tap-macro RC-q r ))

                        (defalias
                        fccc (tap-macro RC-q c ))

                        (defalias
                        bC (tap-macro RC-q RC-p RC-0 ))

                        (defalias
                        fC (tap-macro RC-q RC-p RC-1 ))
                                (defalias
                                chsym (tap-hold-next-release 250 @cq @symbol))

                                (defalias
                                chnumber (tap-hold-next-release 250 @c[ @number))

                                (defalias
                                chutils (tap-hold-next-release 250 @cz @utils))

                                (defalias
                                chfn (tap-hold-next-release 250 @c/ @fn))

                                (defalias
                                ch (layer-toggle metabliss))

                                (defalias
                                  chcaps (tap-hold-next-release 250 @ccap @caps))

                                (defalias
                                  chptap (tap-hold-next-release 250 @ptap c))

                                (defalias
                                  chntap (tap-hold-next-release 250 @ntap v))

(defsrc
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc            ralt rmet cmp  rctl
)

(deflayer base
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  @chsym    w    e    r    t    y    u    i    o    p    @chnumber ]    \
  @chcaps a    s    d    f    g    h    j    k    l    ;    '    ret
  @lsft @chutils    x    c    v    b    n    m    ,    .    @chfn    rsft
  lctl @super @ch           spc            ralt rmet cmp  rctl
)

(deflayer capslayer
  grv  RC-1    RC-2    RC-3    RC-4    RC-5    RC-6    RC-7    RC-8    RC-9    RC-0    RC--    RC-=    bspc
  tab  RC-q    RC-w    RC-e    up    RC-t    RC-y    esc    RC-i    RC-o     RC-p   RC-[  RC-]    RC-\
  caps RC-a    RC-s    RC-d    RC-f    RC-g   RC-h     RC-j   RC-k     down  RC-;    RC-'    RC-ret
  lsft  RC-z   RC-x    RC-c    RC-v    RC-b    RC-n    RC-m    RC-,    RC-.    RC-z    RC-rsft
  lctl @super RC-@meta           RC-spc            ralt rmet cmp  rctl
)

(deflayer inklayer
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  @def  '    RC-left    RC-up    ]    t    y    esc    i    o     p   [  ]    \
  RC-@caps ret    s    RC-down    RC-right    g   h     j   k     down  ;    '    ret
  lsft  z   x    c    v    b    n    m    ,    .    z    rsft
  lctl lmet lalt           spc            ralt rmet cmp  rctl
)

(deflayer lsftlayer
  grv  S-1    S-2    S-3    S-4    S-5    S-6    S-7    S-8    S-9    S-0    S--    S-=    bspc
  S-tab  S-q    S-w    S-e    S-r    S-t    S-y    S-u    S-i    S-o     S-p   S-[  S-]    S-\
  caps S-a    S-s    S-d    S-f    S-g   S-h     S-j   S-k     S-l  S-;    S-'    S-ret
  lsft  S-z   S-x    S-c    S-v    S-b    S-n    S-m    S-,    S-.    S-/    S-rsft
  lctl @super RC-@meta           S-spc            ralt rmet cmp  rctl
)

(deflayer superlayer
  M-grv  M-1    M-2    M-3    M-4    M-5    M-6    M-7    M-8    M-9    M-0    M--    M-=    M-bspc
  M-tab  M-q    M-w    M-e    M-r    M-t    M-y    esc    M-i    M-o     M-p   M-[  M-]    M-\
  M-caps M-a    M-s    M-d    M-f    M-g   M-h     M-j   M-k    M-l   M-;    M-'    M-ret
  M-lsft  M-z   M-x    M-c    M-v    M-b    M-n    M-m    M-,    M-.    M-z    M-rsft
  lctl lmet M-@meta           spc            ralt rmet cmp  rctl
)

(deflayer symbolayer
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  _    left    up   _    _                 _  @bccc    @bb   @fb     @fccc  @    ret
  caps  left    _    _    down    right    _    @bC    @bc   @bp       @fp    @fc  @fC
  lsft _    _    _   esc    g             _         @bl      @bcc    @fcc    @fl  `    rsft
  lctl lmet @ch           spc            ralt rmet cmp  rctl
)

(deflayer numberlayer
  grv  1    2    3    4    5          6    7    8    9    0    -    =    bspc
  [  *    7    8   9    '           _   _     up   right   _  _ \
  caps bspc    4    5    6    S-]      ret   left    down   _  _  _  _ _
  lsft 0    1    2   3    e   _      _    _    g    esc  rsft
  lctl lmet @ch           spc               ralt rmet cmp  rctl
)

(deflayer utilslayer
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  _    _    _    _    _    _    sys    slck    pause   _     _   _   \
  caps _    _    _    _    _    S-sys    ins           home     pageup  _  _     ret
  lsft _    _    _    _    _    _    del            end     pagedown    _    rsft
  lctl lmet @ch           spc            ralt rmet cmp  rctl
)

(deflayer fnlayer
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  f1    f2    f3    f4    f5    _    _    _    _    _     _  _    \
  caps f6    f7    f8    f9    f10    f11    f12    _    _    _    _    ret
  lsft 1    2    3    4    _      _    _    _    _    _    rsft
  lctl lmet @ch           spc            ralt rmet cmp  rctl
)

;; (deflayer vibliss
;;   grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
;;   tab  q    left        r    t    y    RC-u    i    o    right    [    ]    \
;;   @chcaps a    s    d    f    g    h    left    k    l    ;    '    ret
;;   @vi2 z    x    down    up    b    n    m    ,    .    @chfn    rsft
;;   lctl lmet @ba           spc            ralt rmet cmp  rctl
;; )

;; (deflayer vibliss2
;;   grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
;;   tab  Q    W    E    R    T    Y    U    I    O    P    S-[    S-]    S-\
;;   caps A    S    D    F    G    H    J    K    L    S-;    S-'    ret
;;   lsft Z    X    C    V    B    N    M    S-,  S-.  S-/    rsft
;;   lctl lmet lalt           spc            ralt rmet cmp  rctl
;; )

(deflayer metabliss
  grv  A-1    A-2    A-3    A-4    A-5    A-6    A-7    A-8    A-9    A-0    A--    A-=    A-bspc
  tab  A-q    A-w    A-e    A-r    A-t    A-y    A-u    A-i    A-o    A-p    A-[    A-]    A-bspc
  caps A-a    A-s    A-d    A-f    A-g    A-h    A-j    A-k    A-l    A-;    A-'    A-ret
  lsft A-z    A-x    A-c    A-v    A-b    A-n    A-m    A-,    A-.    A-/    A-rsft
  lctl lmet lalt           spc            ralt rmet cmp  rctl
)
