#+title: Config
* DOOM
#+begin_src elisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
(setq user-full-name "Enzo Bissoli"
      user-mail-address "enzogurgel15@gmail.com")
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; -*- lexical-binding: t; -*-
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two
(setq doom-font (font-spec :family "PragmataPro" :size 12) ;; use :weight parameter for something other than regular
      doom-variable-pitch-font (font-spec :family "PragmataPro" :size 13 ))

(setq doom-unicode-font (font-spec :family "PragmataPro Mono"))
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-meltbus)
#+end_src
** Company
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.3))
#+end_src

* ORG
** Basic org
#+begin_src elisp
(remove-hook 'org-mode-hook #'org-superstar-mode) ;;basic doom emacs


(setq display-line-numbers-type t) ;; basic -doom -config

(after! org
  (setq org-fontify-quote-and-verse-blocks nil
        org-fontify-whole-heading-line nil
        ;; org-hide-leading-stars nil
        org-startup-indented nil)
  (setq org-todo-keywords '((sequence "TODO(t)" "PROJ(p)" "LOOP(r)" "STRT(s)" "WAIT(w)" "HOLD(h)" "IDEA(i)" "NEXT(n)" "|" "DONE(d)" "KILL(k)") (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)") (sequence "|" "OKAY(o)" "YES(y)" "NO(n)")))
  )

;;If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!

(setq org-directory "~/Insync/enzogurgel15@gmail.com/GoogleDrive/org/")
#+end_src
** Org noter
#+begin_src elisp
(setq org-noter-notes-search-path '("~/Insync/enzogurgel15@gmail.com/GoogleDrive/org/")) ;;basic org config
#+end_src
** Org Capture
#+begin_src emacs-lisp
(after! (:or org-capture org-agenda org)
(setq org-capture-templates
(doct '(("UNI" :keys "u"
:file "~/Insync/enzogurgel15@gmail.com/GoogleDrive/UFPE/2021.2/2021.2.org"
:prepend t
    :template ("* %{todo-state} %?"
                "%i %a")
    :children (("Eng Software"  :keys "e"
                :headline   "engSoftware"
                :todo-state "TODO"
                :hook (lambda () (message "\"Eng Software\" selected.")))
                ("GDI " :keys "g"
                :headline   "GDI"
                :todo-state "TODO"
                :hook (lambda () (message "\"GDI\" selected.")))
                ("PLC "  :keys "p"
                :headline   "PLC"
                :todo-state "TODO"
                :hook (lambda () (message "\"PLC\" selected.")))
                ("histComp "  :keys "h"
                :headline   "histComp"
                :todo-state "TODO"
                :hook (lambda () (message "\"histComp\" selected.")))
                ("infraCOM "  :keys "c"
                :headline   "histComp"
                :todo-state "TODO"
                :hook (lambda () (message "\"infraCOM\" selected.")))
                ("infraSW "  :keys "s"
                :headline   "histComp"
                :todo-state "TODO"
                :hook (lambda () (message "\"infraSW\" selected.")))
                ))
    ("Bookmarks" :keys "b"
    :file "~/Insync/enzogurgel15@gmail.com/GoogleDrive/org/20220409134224-bookmarks.org"
    :append t
    :type entry
    :template ("* %^{Description} %?"
                "%i"))
    ("Appointments" :keys "p"
    :file "~/Insync/enzogurgel15@gmail.com/GoogleDrive/UFPE/2021.2/2021.2.org"
    :append t
    :headline "Appointments"
    :type entry
    :template ("* %^{Description} %?"
                "%i"))
    ("Projects" :keys "P"
    :file "~/Insync/enzogurgel15@gmail.com/GoogleDrive/UFPE/2021.2/2021.2.org"
    :append t
    :headline "Projects"
    :type entry
    :template ("* %^{Description} %?"
                "%i"))
    ("Later" :keys "l"
    :file "~/Insync/enzogurgel15@gmail.com/GoogleDrive/UFPE/2021.2/2021.2.org"
    :append t
    :headline "Later"
    :type entry
    :template ("* %^{Description} %?"
                "%i"))
    ))))
#+end_src
# ** Deft
# #+begin_src elisp
# (use-package deft
# :after org
# :custom
# (deft-recursive t)
# (deft-use-filter-string-for-filename t)
# (deft-default-extension "org")
# (deft-directory "~/Insync/enzogurgel15@gmail.com/Google Drive/org/")) ;;notetaking-deft
# #+end_src

;; Function to calculate relative day to today
** Agenda
#+begin_src elisp

(use-package! org-super-agenda
  :commands org-super-agenda-mode)

(after! (:or org-agenda org)
  (org-super-agenda-mode)

  (setq org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-block-separator 61
        org-agenda-tags-column 100 ;; from testing this seems to be a good value
        org-agenda-compact-blocks nil
        org-agenda-start-day nil) ;today
  (defun timeFrwd (timefrwd) (format-time-string "%Y-%m-%d" (org-read-date nil t (concat "+" timefrwd))))
  (setq org-agenda-custom-commands
        '(("o" "Overview of the day"
           (

            (org-ql-block '(and
                            (deadline :from "6" :to "7")
                            (path "2021.2/")
                            )
                          ((org-ql-block-header "Deadline in 6-7 days")))
            (org-ql-block '(and
                            (scheduled :from "6" :to "7")
                            (path "2021.2/")
                            )
                          ((org-ql-block-header "Scheduled in 6-7 days")))

            (org-ql-block '(and
                            (scheduled :from "3" :to "5")
                            (path "2021.2/")
                            )
                          ((org-ql-block-header "Scheduled in 3-5 days")))

            (org-ql-block '(and
                            (deadline :from "3" :to "5")
                            (path "2021.2/")
                            )
                          ((org-ql-block-header "Deadline in 3-5 days")))
            (org-ql-block '(and
                            (deadline :from "1" :to "2")
                            (path "2021.2/")
                            )
                          ((org-ql-block-header "Deadline in 1-2 days")))
            (org-ql-block '(and
                            (scheduled :from "1" :to "2")
                            (path "2021.2/")
                            )
                          ((org-ql-block-header "Scheduled in 1-2 days")))
            (org-ql-block '(or (and
                                (priority "A")
                                (path "2021.2/"))
                               (and (tags "RECUR")
                                    (not (ancestors (tags "RECUR")))
                                    ))
                          ((org-ql-block-header "For Today")))
            (agenda "" ((org-agenda-span 'day)
                        (org-super-agenda-groups
                         '((:name "Today Tasks"
                            :time-grid t
                            :date today
                            :tag "TODAY"
                            :scheduled today
                            :order 1
                            :discard (:anything t))))))
            )
           )
          ("U1" "Uni stuff for the month"
           (
            (org-ql-block '(and
                            (ancestors (h "engSoftware"))
                            (deadline :from "8" :to "30")
                            (path "2021.2/"))
                          ((org-ql-block-header "Eng Software month planning")))
            (org-ql-block '(and
                            (ancestors (h "GDI"))
                            (deadline :from "8" :to "30")
                            (path "2021.2/"))
                          ((org-ql-block-header "GDI month planning")))
            (org-ql-block '(and
                            (ancestors (h "histComp"))
                            (deadline :from "8" :to "30")
                            (path "2021.2/"))
                          ((org-ql-block-header "histComp month planning")))
            (org-ql-block '(and
                            (ancestors (h "PLC"))
                            (deadline :from "8" :to "30")
                            (path "2021.2/"))
                          ((org-ql-block-header "PLC month planning")))
            (org-ql-block '(and
                            (ancestors (h "infraCOM"))
                            (deadline :from "8" :to "30")
                            (path "2021.2/"))
                          ((org-ql-block-header "infraCOM month planning")))
            (org-ql-block '(and
                            (ancestors (h "infraSW"))
                            (deadline :from "8" :to "30")
                            (path "2021.2/"))
                          ((org-ql-block-header "infraSW month planning")))
            ))
          ("U2" "Uni stuff for the next 3 months"
           (
            (org-ql-block '(and
                            (ancestors (h "engSoftware"))
                            (deadline :from "31" :to "90")
                            (path "2021.2/"))
                          ((org-ql-block-header "Eng Software month planning")))
            (org-ql-block '(and
                            (ancestors (h "GDI"))
                            (deadline :from "31" :to "90")
                            (path "2021.2/"))
                          ((org-ql-block-header "GDI month planning")))
            (org-ql-block '(and
                            (ancestors (h "histComp"))
                            (deadline :from "31" :to "90")
                            (path "2021.2/"))
                          ((org-ql-block-header "histComp month planning")))
            (org-ql-block '(and
                            (ancestors (h "PLC"))
                            (deadline :from "31" :to "90")
                            (path "2021.2/"))
                          ((org-ql-block-header "PLC month planning")))
            (org-ql-block '(and
                            (ancestors (h "infraCOM"))
                            (deadline :from "31" :to "90")
                            (path "2021.2/"))
                          ((org-ql-block-header "infraCOM month planning")))
            (org-ql-block '(and
                            (ancestors (h "infraSW"))
                            (deadline :from "31" :to "90")
                            (path "2021.2/"))
                          ((org-ql-block-header "infraSW month planning")))
            ))
          ("P1" "Personal stuff for the next month"
           ((org-ql-block '(and
                            (ancestors (h "Appointments"))
                            (deadline :from "8" :to "30")
                            (path "2021.2/"))
                          ((org-ql-block-header "Appointments month planning")))
            (org-ql-block '(and
                            (ancestors (h "Projects"))
                            (not (todo "DONE"))
                            (deadline :from "8" :to "30")
                            (path "2021.2/"))
                          ((org-ql-block-header "Projects planning")))
            (org-ql-block '(and
                            (ancestors (h "Emacs"))
                            (deadline :from "8" :to "30")
                            (path "2021.2/"))
                          ((org-ql-block-header "Emacs planning")))
            (org-ql-block '(and
                            (ancestors (h "Travel"))
                            (deadline :from "8" :to "30")
                            (path "2021.2/"))
                          ((org-ql-block-header "Travel planning")))
            (org-ql-block '(and
                            (ancestors (h "People"))
                            (deadline :from "8" :to "30")
                            (path "2021.2/"))
                          ((org-ql-block-header "People planning")))
            (org-ql-block '(and
                            (ancestors (h "Later"))
                            (path "2021.2/"))
                          ((org-ql-block-header "Later month planning")))
            ))
          ("PO" "Personal stuff List"
           ((org-ql-block '(and
                            (ancestors (h "Appointments"))
                            (not (todo "DONE"))
                            (path "2021.2/"))
                          ((org-ql-block-header "Appointments List")))
            (org-ql-block '(and
                            (ancestors (h "Projects"))
                            (not (todo "DONE"))
                            (path "2021.2/"))
                          ((org-ql-block-header "Projects List")))
            (org-ql-block '(and
                            (ancestors (h "Emacs"))
                            (not (todo "DONE"))
                            (path "2021.2/"))
                          ((org-ql-block-header "Emacs List")))
            (org-ql-block '(and
                            (ancestors (h "Travel"))
                            (not (todo "DONE"))
                            (path "2021.2/"))
                          ((org-ql-block-header "Travel List")))
            (org-ql-block '(and
                            (ancestors (h "People"))
                            (not (todo "DONE"))
                            (path "2021.2/"))
                          ((org-ql-block-header "People List")))
            (org-ql-block '(and
                            (ancestors (h "Later"))
                            (not (todo "DONE"))
                            (path "2021.2/"))
                          ((org-ql-block-header "Later List")))
            ))
          )))

;; (defun my-open-calendar ()
;;   (interactive)
;;   (cfw:open-calendar-buffer
;;    :contents-sources
;;    (list
;;     (cfw:org-create-source "Green")  ; org-agenda source
;;     (cfw:org-create-file-source "cal" "~/Insync/enzogurgel15@gmail.com/Google Drive/UFPE/2021.2/2021.2.org" "Blue")  ; other org source
;;     )))
#+end_src
** Roam
#+begin_src elisp
(setq org-roam-directory "~/Insync/enzogurgel15@gmail.com/GoogleDrive/org/")
(setq org-roam-completion-everywhere t)
(require 'org-roam-protocol)
(setq org-roam-capture-ref-templates
'(("i" "internet" plain #'org-roam-capture--get-point "%?"
    :file-name "float/%<%Y%m%d%H%M>-${slug}"
    :head "#+title: ${title}\n#+roam_key: ${ref}\n#+roam_tags: bookmark"
    :unnarrowed t)))

(use-package! websocket
:after org-roam)

(use-package! org-roam-ui
:after org-roam ;; or :after org
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
:config
(setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))
#+end_src
** Pomodoro
#+begin_src elisp
(setq org-pomodoro-length 25)
(setq org-pomodoro-short-break-length 5)
(setq org-pomodoro-long-break-length 25)
(setq org-pomodoro-clock-break 60)
(setq org-pomodoro-long-break-frequency 8)
(setq org-pomodoro-keep-killed-pomodoro-time t) ;;planning -pomodoro
#+end_src
* EMAIL
#+begin_src elisp
(after! mu4e
  (setq sendmail-program (executable-find "msmtp")
        send-mail-function #'smtpmail-send-it
        message-sendmail-f-is-evil t
        message-sendmail-extra-arguments '("--read-envelope-from")
        message-send-mail-function #'message-send-mail-with-sendmail))

(set-email-account! "enzogurgel15@gmail.com"
  '((mu4e-sent-folder       . "/Personal/Sent Mail")
    (mu4e-drafts-folder     . "/Personal/Drafts")
    (mu4e-trash-folder      . "/Personal/Trash")
    (mu4e-refile-folder     . "/Personal/All Mail")
    (smtpmail-smtp-user     . "enzogurgel15@gmail.com")
    (mu4e-compose-signature . "---\n---/n/-------"))
  t)

(set-email-account! "egb2@cin.ufpe.br"
  '((mu4e-sent-folder       . "/CIn/Sent Mail")
    (mu4e-drafts-folder     . "/CIn/Drafts")
    (mu4e-trash-folder      . "/CIn/Trash")
    (mu4e-refile-folder     . "/CIn/All Mail")
    (smtpmail-smtp-user     . "egb2@cin.ufpe.br")
    (mu4e-compose-signature . "---\n Tenha um ótimo dia--"))
  t)

(setq +mu4e-gmail-accounts '(("enzogurgel15@gmail.com" . "/enzogurgel15")
                             ("egb2@cin.ufpe.br" . "/egb2")))

(setq mu4e-context-policy 'ask-if-none
      mu4e-compose-context-policy 'always-ask)

(setq mu4e-index-cleanup nil
      ;; because gmail uses labels as folders we can use lazy check since
      ;; messages don't really "move"
      mu4e-index-lazy-check t)
#+end_src

* PROGRAMMING
** LSP
#+begin_src emacs-lisp
(after! lsp-mode
  (setq lsp-enable-symbol-highlighting nil
        lsp-enable-suggest-server-download nil))
(after! lsp-ui-mode
  (setq lsp-ui-sideline-enable nil
        lsp-ui-doc-enable nil))
#+end_src
*** DAP
#+begin_src emacs-lisp
(map! :map dap-mode-map
      :leader
      :prefix ("d" . "dap")
      ;; basics
      :desc "dap next"          "n" #'dap-next
      :desc "dap step in"       "i" #'dap-step-in
      :desc "dap step out"      "o" #'dap-step-out
      :desc "dap continue"      "c" #'dap-continue
      :desc "dap hydra"         "h" #'dap-hydra
      :desc "dap debug restart" "r" #'dap-debug-restart
      :desc "dap debug"         "s" #'dap-debug

      ;; debug
      :prefix ("dd" . "Debug")
      :desc "dap debug recent"  "r" #'dap-debug-recent
      :desc "dap debug last"    "l" #'dap-debug-last

      ;; eval
      :prefix ("de" . "Eval")
      :desc "eval"                "e" #'dap-eval
      :desc "eval region"         "r" #'dap-eval-region
      :desc "eval thing at point" "s" #'dap-eval-thing-at-point
      :desc "add expression"      "a" #'dap-ui-expressions-add
      :desc "remove expression"   "d" #'dap-ui-expressions-remove

      :prefix ("db" . "Breakpoint")
      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)
(use-package dap-mode
  :custom
  ;; (lsp-enable-dap-auto-configure nil)
  (dap-external-terminal '("foot" "-T" "foot-debug" "--hold" "-e" "sh" "-c" "exec {command}"))
  :config
  (setq dap-auto-configure-features '(locals tooltip sessions expressions))
  )

#+end_src
** Org-Babel
#+begin_src elisp
;; active Babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (gnuplot . t)
   (spice .t)
   (matlab . t)
   (maxima . t)
   (gnuplot .t)
   (octave .t)
   (jupyter .t)
   (sml . t)
   (haskell .t)
   (ein .t)
   )
 ) ;; programming -org-babel
#+end_src
** SQL
#+begin_src emacs-lisp
(add-hook 'sql-mode-hook 'lsp)
(setq lsp-sqls-workspace-config-path nil)
(setq lsp-sqls-connections
    '(((driver . "mysql") (dataSourceName . "yyoncho:local@tcp(localhost:3306)/foo"))
      ((driver . "mssql") (dataSourceName . "Server=localhost;Database=sammy;User Id=yyoncho;Password=hunter2;"))
      ((driver . "postgresql") (dataSourceName . "host=127.0.0.1 port=5432 user=ebissoli dbname=gdiProj sslmode=disable"))))
#+end_src
** Latex
#+begin_src elisp
(defun my-preview-latex ()
  "Preview LaTeX from the current cell in a separate buffer.

Handles only markdown and code cells, but both in a bit different
ways: on the former, its input is being rendered, while on the
latter - its output."
  (interactive)
  (let* ((cell (ein:worksheet-get-current-cell))
	 (text-to-render
	  (cond ((ein:markdowncell-p cell) (slot-value cell :input))
		((ein:codecell-p cell)
		 (plist-get (car (cl-remove-if-not
				  (lambda (e) (string= (plist-get e :name) "stdout"))
				  (slot-value cell :outputs)))
			    :text))
		(t (error "Unsupported cell type"))))
	 (buffer (get-buffer-create " *ein: LaTeX preview*")))
    (with-current-buffer buffer
      (when buffer-read-only
	(toggle-read-only))
      (unless (= (point-min) (point-max))
	(delete-region (point-min) (point-max)))
      (insert text-to-render)
      (goto-char (point-min))
      (org-mode)
      (org-toggle-latex-fragment 16)
      (special-mode)
      (unless buffer-read-only
	(toggle-read-only))
      (display-buffer
       buffer
       '((display-buffer-below-selected display-buffer-at-bottom)
         (inhibit-same-window . t)))
      (fit-window-to-buffer (window-in-direction 'below))))) ;;programming - auctex


(setq +latex-viewers '(pdf-tools)) ;; programming -latex
#+end_src
** Julia
#+begin_src elisp
;; lsp-julia config
(setq lsp-julia-package-dir nil)
(setq lsp-julia-default-environment "~/.julia/environments/v1.0") ;; programming - julia
#+end_src
** Python
#+begin_src emacs-lisp
(after! dap-mode
  (setq dap-python-debugger 'debugpy)
      (setq dap-python-terminal "foot -e python")
  (setq dap-python-executable "python"))
#+end_src
** Typescript/Node/Js
#+begin_src emacs-lisp
(require 'dap-chrome)
(require 'dap-node)
#+end_src
** Zig
#+begin_src elisp
(use-package! zig-mode
  :hook ((zig-mode . lsp-deferred))
  :custom (zig-format-on-save nil)
  :config
  (after! lsp-mode
    (add-to-list 'lsp-language-id-configuration '(zig-mode . "zig"))
    (lsp-register-client
      (make-lsp-client
        :new-connection (lsp-stdio-connection "/home/enzobissoli/zls/zls")
        :major-modes '(zig-mode)
        :server-id 'zls)))) ;; programming zig, can remove?


(setq lsp-zig-zls-executable "~/.local/bin/zls") ;; programming - zig
#+end_src

** C/C++
#+begin_src elisp
(set-docsets! 'c-mode "C")

(require 'platformio-mode)
;; Enable ccls for all c++ files, and platformio-mode only
;; when needed (platformio.ini present in project root).
(add-hook 'c++-mode-hook (lambda ()
                           (lsp-deferred)
                           (platformio-conditionally-enable)));; Enable ccls for all c++ files, and platformio-mode only
#+end_src

** Bash
#+begin_src elisp
(set-docsets! 'sh-mode "Bash")
#+end_src

** Maxima
#+begin_src elisp
(add-to-list 'load-path "/usr/bin/maxima/")
(autoload 'maxima-mode "maxima" "Maxima mode" t)
(autoload 'imaxima "imaxima" "Frontend for maxima with Image support" t)
(autoload 'maxima "maxima" "Maxima interaction" t)
(autoload 'imath-mode "imath" "Imath mode for math formula input" t)
(setq imaxima-use-maxima-mode-flag t)
(add-to-list 'auto-mode-alist '("\\.ma[cx]\\'" . maxima-mode))
(matlab-cedet-setup) ;;programming -maxima
#+end_src

** SML
#+begin_src elisp
(setq exec-path (cons "/usr/local/SMLROOT/bin"  exec-path)) ;; programing sml
#+end_src

** MATLAB
#+begin_src elisp
(set-docsets! 'matlab-mode "MATLAB") ;; programming - misc, docsets?
#+end_src


#+end_src
* HACKS
** autoinsert SSH key
#+begin_src elisp
;;;###autoload
(defun keychain-refresh-environment ()
  "Set ssh-agent and gpg-agent environment variables.
Set the environment variables `SSH_AUTH_SOCK', `SSH_AGENT_PID'
and `GPG_AGENT' in Emacs' `process-environment' according to
information retrieved from files created by the keychain script."
  (interactive)
  (let* ((ssh (shell-command-to-string "keychain -q --noask --agents ssh --eval"))
         (gpg (shell-command-to-string "keychain -q --noask --agents gpg --eval")))
    (list (and ssh
               (string-match "SSH_AUTH_SOCK[=\s]\\([^\s;\n]*\\)" ssh)
               (setenv       "SSH_AUTH_SOCK" (match-string 1 ssh)))
          (and ssh
               (string-match "SSH_AGENT_PID[=\s]\\([0-9]*\\)?" ssh)
               (setenv       "SSH_AGENT_PID" (match-string 1 ssh)))
          (and gpg
               (string-match "GPG_AGENT_INFO[=\s]\\([^\s;\n]*\\)" gpg)
               (setenv       "GPG_AGENT_INFO" (match-string 1 gpg))))))

;;; _
(provide 'keychain-environment)
;; Local Variables:
;; indent-tabs-mode: nil
;; End:
;;; keychain-environment.el ends here
(keychain-refresh-environment) ;; hacks --ssh
#+end_src

** Copy & paste in wayland
#+begin_src elisp
(custom-set-faces!
  '(aw-leading-char-face
    :foreground "white" :background "red"
    :weight bold :height 2.5 :box (:line-width 10 :color "red"))) ;; hacks?

(setq wl-copy-process nil)
(defun wl-copy (text)
 (setq wl-copy-process (make-process :name "wl-copy"
                                     :buffer nil
                                     :command '("wl-copy" "-f" "-n")
                                     :connection-type 'pipe))
 (process-send-string wl-copy-process text)
 (process-send-eof wl-copy-process))

(defun wl-paste ()
 (if (and wl-copy-process (process-live-p wl-copy-process))
     nil ; should return nil if we're the current paste owner
   (shell-command-to-string "wl-paste -n | tr -d \r")))

(setq interprogram-cut-function 'wl-copy)
(setq interprogram-paste-function 'wl-paste) ;; hacks - wayland
#+end_src

** Xwidget open dashdocs
#+begin_src
(setq +lookup-open-url-fn #'+lookup-xwidget-webkit-open-url-fn)
(after! dash-docs
  (setq dash-docs-browser-func #'+lookup-xwidget-webkit-open-url-fn)) ;; hacks - internal docs

(setq evil-move-cursor-back nil)
#+end_src

** Change projectile root dir
#+begin_src elisp
(defun change-projectile-root ()
  "Change the root dir for projectile"
  (interactive)
  (setq projectile-project-root (read-directory-name "Default project root: ")))
#+end_src

** platformio-fix
#+begin_src elisp
;;; Internal functions
(defun platformio--exec (target)
  "Call `platformio ... TARGET' in the root of the project."
  (let ((default-directory projectile-project-root)
        (cmd (concat "platformio -f -c emacs " target)))
    (unless default-directory
      (user-error "Not in a projectile project, aborting"))
    (save-some-buffers (not compilation-ask-about-save)
                       (lambda ()
                         (projectile-project-buffer-p (current-buffer)
                                                      default-directory)))
    (compilation-start cmd 'platformio-compilation-mode)))

(defun platformio--silent-arg ()
  "Return command line argument to make things silent."
  (when platformio-mode-silent
    "-s "))
#+end_src

** Disable line-numbers fix
#+begin_src emacs-lisp
(setq display-line-numbers-type nil)
#+end_src

* KEYBINDS
*** Windows
**** Quickly change windows
#+begin_src elisp
(map!
        :leader
        :prefix "w"
        :desc "Quick window switch" :n "z" #'ace-window)

#+end_src
**** Quickly swap windows
#+begin_src emacs-lisp
(map!
        :leader
        :prefix "w"
        :desc "Swap state down" :n "C-M-j" #'windmove-swap-states-down)

(map!
        :leader
        :prefix "w"
        :desc "Swap state up" :n "C-M-k" #'windmove-swap-states-up)

(map!
        :leader
        :prefix "w"
        :desc "Swap state left" :n "C-M-h" #'windmove-swap-states-left)

(map!
        :leader
        :prefix "w"
        :desc "Swap state right" :n "C-M-l" #'windmove-swap-states-right)
#+end_src
**** Acess elfeed-mode
#+begin_src elisp
(map!
        :leader
        :prefix "o"
        :desc "The elfeed" :n "e" #'elfeed)

#+end_src
**** Resize Windows
#+begin_src elisp
(map!
    (:prefix "w"
      :desc "Hydra resize" :n "SPC" #'doom-window-resize-hydra/body))
#+end_src
*** Movement
**** Move outer of inner of function
#+begin_src emacs-lisp
(map!
    :g "C-M-v" nil
    :desc "Move out function hierarchy" :n "C-M-v" #'sp-backward-up-sexp)
(map!
    :g "M-v" nil
    :desc "Move into function hierarchy" :n "M-v" #'sp-down-sexp)
(evil-define-motion evil-prev-close-brackets (count)
"Go to [count] next unmatched '}'."
:type exclusive
(evil-up-paren ?\} ?\) (- (or count 1)))
)
(map!
        :g "C-M-r" nil
        :desc "Move outside of function hierarchy" :n "C-M-r" #'evil-prev-close-brackets)
(map!
        :g "C-M-/" nil
        :desc "previous in context" :n "C-M-/" #'evil-backward-paragraph)
(map!
        :g "M-/"
        :desc "next context" :n "C-/" #'evil-forward-paragraph)

(map!
        :g "C-M-n" nil
        :desc "Move below" :n "C-M-n" #'sp-backward-symbol)

(map!
        :g "M-n" nil
        :desc "Move up" :n "M-n" #'sp-forward-symbol)
#+end_src
**** Same depth movement
#+begin_src emacs-lisp
(map!
        :g "C-M-p" nil
        :desc "next in list" :n "C-M-p" #'sp-forward-parallel-sexp)
(map!
        :g "M-p" nil
        :desc "previous in list" :n "M-p" #'sp-backward-parallel-sexp)
(map!
        :g "M-n" nil
        :desc "Move out ()'s'" :n "M-n" #'backward-list)
(map!
        :g "C-M-n" nil
        :desc "previous in context" :n "C-M-n" #'forward-list)

(map!
        :g "M-s" nil
        :desc "end of actual context" :n "M-s" #'sp-beginning-of-previous-sexp)
#+end_src

**** Symbol jumping
#+begin_src emacs-lisp
(map!
 :g "C-M-s" nil
 :desc "map to next symbol" :n "C-M-s" #'evil-jump-item)
(map!
        :g "C-M-c" nil
        :desc "next symbol" :n "C-M-c" #'evil-previous-open-brace)
(evil-define-motion evil-next-open-paren (count)
"Go to [count] next unmatched '{'."
:type exclusive
(forward-char)
(evil-up-paren ?\{ ?\{ (or count 1))
)
(map!
        :g "M-c" nil
        :desc "prev parethesis" :n "M-c" #'evil-next-open-paren)
(map!
 :g "M-r" nil
 :desc "prev context" :n "M-r" #'evil-next-close-brace)

(map!
 :g "M-[" nil
 :desc "outside ()'s'" :n "M-[" #'sp-up-sexp)

(map!
 :g "M-{" nil
 :desc "inside ()'s" :n "M-{" #'sp-down-sexp)

(map!
 :g "M-o" nil
 :desc "swap back to cursor" :n "M-o" #'evil-jump-backward-swap)
(map!
 :g "M-," nil
 :desc "jmp next arg" :n "M-," #'evil-jump-forward)

(map!
 :g "C-M-," nil
 :desc "jmp next arg" :n "C-M-," #'evil-jump-backward)


(map!
 :g "C-M-o" nil
 :desc "mark pos to quick return" :n "C-M-o" #'better-jumper-set-jump)
(defun my-cool-jump ()
  (interactive)
  ( progn
    (back-to-indentation)
    (evil-end-of-line-or-visual-line)
    (sp-next-sexp) ))
(map!
 :g "C-o" nil
 :desc "Jmp to function defs" :n "C-o" #'my-cool-jump)
(defun my-2-cool-jump ()
  (interactive)
  (progn
    (evil-beginning-of-line)
    (sp-backward-down-sexp)
    (sp-backward-up-sexp)
    (back-to-indentation)))
(map!
 :g "C-a" nil
 :desc "mark pos to quick return" :n "C-a" #'my-2-cool-jump)
(map!
 :g "C-s" nil
 :desc "search symbol at point" :n "C-s" #'evil-ex-search-word-forward)
#+end_src

**** Readonly manipulation sexp
#+begin_src elisp
(map!
 :g "C-M-k" nil
 :desc "kill whole line" :no "C-M-k" #'sp-kill-hybrid-sexp)
 (map!
  :g "C-k" nil
  :n "C-k" #'sp-mark-sexp)

 (map!
  :g "M-a" nil
  :desc "transpose sexp" :no "M-a" #'evil-beginning-of-line)

 (map!
  :g "M-e" nil
  :desc "copy mark" :no "M-e" #'evil-end-of-line-or-visual-line)

(map!
    :g "M-j" nil
    :desc "Move sexp below" :n "M-j"#'sp-push-hybrid-sexp)
(map!
    :g "M-k" nil
    :desc "Move sexp up" :n "M-k"#'sp-transpose-hybrid-sexp)
#+end_src

**** Yanking
#+begin_src emacs-lisp
(map!
        :g "C-M-y" nil
        :desc "acess the kill-ring" :n "C-M-y" #'yank-from-kill-ring)

#+end_src

**** Folding
#+begin_src emacs-lisp
(map!
        :desc "fold-toggle" :n "z g" #'+fold/toggle )
(map!
        :desc "fold-open" :n "z G" #'+fold/close)
#+end_src

**** Buffering :)
#+begin_src emacs-lisp
(map! :g "M->" nil
      :desc "buffer-next" :n "M->" #'switch-to-prev-buffer)
(map! :g "M-<" nil
      :desc "buffer-next" :n "M-<" #'switch-to-next-buffer)
#+end_src
*** Mode interface
#+begin_src emacs-lisp
(map!
        :desc "Don't show line numbers" :n "z ," #'menu-bar--display-line-numbers-mode-none)

(map!
        :desc "Show line numbers" :n "z '" #'menu-bar--display-line-numbers-mode-absolute)

(map!
        :map magit-mode-map
        :desc "Stage with s" :vi "s" #'magit-stage)

(map!
        :map magit-mode-map
        :desc "Unstage with u" :vi "u" #'magit-unstage)
(map!
        :map (minibuffer-local-map minibuffer-local-ns-map minibuffer-local-completion-map minibuffer-local-must-match-map minibuffer-local-isearch-map read-expression-map)
        :desc "Paste with p" :ineg "C-S-v" #'evil-paste-after)

(map!
 (:map pdf-view-mode-map
 :desc "Scrool up in pdftools" :nm "j" #'pdf-view-scroll-up-or-next-page
  :desc "Scrool up in pdftools" :nm "<double-wheel-down>" #'pdf-view-scroll-down-or-previous-page))
(map!
 (:map pdf-view-mode-map
 :desc "Scrool down in pdftools" :nm "k" #'pdf-view-scroll-down-or-previous-page
   :desc "Scrool up in pdftools" :nm "<double-wheel-up>" #'pdf-view-scroll-up-or-next-page))

(map!
 (:map pdf-view-mode-map
 :desc "show outline" :n "o" #'pdf-outline
  :desc "show outline" :n "<mouse-9>" #'pdf-outline))

(map!
 :map pdf-view-mode-map
 :desc "show search buffer, occur" :n "C-s" #'pdf-occur)

(map!
 :map pdf-view-mode-map
 :desc "search links in pdf" :n "C-M-s" #'pdf-links-isearch-link)
(map!
 :map pdf-view-mode-map
 :desc "go to links, like vimium" :n "f" #'pdf-links-action-perform)
(map!
 :map pdf-view-mode-map
 :desc "Go bookmark page forward" :n "C-j" #'pdf-history-backward)
(map!
 :map pdf-view-mode-map
 :desc "Go bookmark page backward" :n "C-k" #'pdf-history-backward)
(map!
 :map pdf-view-mode-map
 :desc "Zoom in the pdf" :n "=" #'pdf-view-enlarge)
(map!
 :map pdf-view-mode-map
 :desc "Zoom out the pdf" :n "-" #'pdf-view-shrink)

(map!
 :map pdf-view-mode-map
 :desc "register page the pdf" :n "m" #'pdf-view-position-to-register)
(map!
 :map pdf-view-mode-map
 :desc "register jump page the pdf" :n "`" #'pdf-view-jump-to-register)
(map!
 (:map pdf-outline-buffer-mode-map
 :desc " quit toc view" :n "q" #'pdf-outline-quit-and-kill
  :desc " quit toc view" :n "<mouse-8>" #'pdf-outline-quit-and-kill))
(map!
 :map pdf-outline-buffer-mode-map
 :desc "  select content view" :n "RET" #'pdf-outline-display-link)
(map!
 :map pdf-occur-buffer-mode-map
 :desc "go to selection view" :n "RET" #'pdf-occur-goto-occurrence)
(map!
 :map pdf-occur-buffer-mode-map
 :desc "view selection " :n "M-RET" #'pdf-occur-view-occurrence)
(map!
 :map pdf-view-mode-map
 :desc "register macro  " :n "q" #'evil-record-macro)
(map!
 (:map pdf-view-mode-map
 :desc " First page " :n "g g" #'pdf-view-first-page
 :desc " First page " :n "<triple-mouse-9>" #'pdf-view-first-page
 ))
(map!
 :map pdf-view-mode-map
 :desc " Last page " :n "G" #'pdf-view-last-page
  :desc " Last page " :n "<triple-mouse-8>" #'pdf-view-last-page)
(map!
 :map dired-mode-map
 :desc "go to end line " :n "G" #'evil-goto-line)
(map!
 :map dired-mode-map
 :desc "go to first line" :n "g g" #'evil-goto-first-line)
(map!
 :map dired-mode-map
 :desc "go to next search" :n "n" #'evil-ex-search-next)
(map!
 :map dired-mode-map
 :desc "go to prev search" :n "n" #'evil-ex-search-previous)
(map!
 (:map (pdf-view-mode-map pdf-outline-buffer-mode-map)
 :desc "toogle subtree" :n "<double-mouse-9>" #'pdf-outline-toggle-subtree))
#+end_src
* FUNCTIONS
** Notify me in x minutes
#+begin_src elisp
(require 'notifications)
(defun notify-me (interval title body)
  "function that notify me after interval seconds"
(run-with-timer interval nil
                (lambda () (notifications-notify
                            :title title
                            :body body
                            :sound-name "alarm-clock-elapsed"))))

(defun notify-now (title body interval repetition)
  "This function will notify you at most repetition times each happening every interval seconds"
(interactive "MTitle of notification: \nMWhat should be it content: \nXFrequency in minutes: \nnHow many times: ")
(cl-map nil (lambda (y) (notify-me y title body)) (number-sequence (* interval 60) (* interval 60 repetition) interval)))
#+end_src

** Window resize
#+begin_src elisp
(defhydra doom-window-resize-hydra (:hint nil)
  "
             _k_ increase height
_h_ decrease width    _l_ increase width
             _j_ decrease height
"
  ("h" evil-window-decrease-width)
  ("j" evil-window-increase-height)
  ("k" evil-window-decrease-height)
  ("l" evil-window-increase-width)

  ("q" nil))
#+end_src

** Global minor modes
#+begin_src emacs-lisp
(define-globalized-minor-mode global-pixel-precision pixel-scroll-precision-mode
  (lambda () (pixel-scroll-precision-mode 1)))

(global-pixel-precision 1)
#+end_src

* PREFERENCES
** Elfeed
#+begin_src elisp
(after! elfeed
  (setq elfeed-search-filter "@1-day-ago"))
#+end_src

** Dired
#+begin_src elisp
(setq ranger-cleanup-on-disable t) ;; apps - dired

(setq delete-by-moving-to-trash t) ;; emergency trash can

(after! ranger (setq ranger-override-dired-mode t))

(map! :map dired-mode-map
      :n "-" 'dired-up-directory)
#+end_src

** Forge
#+begin_src elisp
(setq auth-sources '("~/.authinfo.gpg"))
#+end_src

** Telega
#+begin_src elisp
(setq telega-directory "~/.telega")
#+end_src

** Emms
#+begin_src emacs-lisp
(setq emms-player-list '(emms-player-mpd))
(setq emms-player-mpd-server-name "localhost")
(setq emms-player-mpd-server-port "6600")
(setq emms-player-mpd-music-directory "~/Music")
(setq emms-add-directory-tree "~/Music")
(map! :map emms-playlist-mode-map
      :n "r" #'emms-random)
(map! (:map (emms-browser-mode-map emms-playlist-mode-map)
      :n "r" #'emms-random
      :n "h" #'emms-browser-collapse-all
      :n "3" #'emms-browser-expand-to-level-3
      :n "2" #'emms-browser-expand-to-level-2
      :n "4" #'emms-browser-expand-to-level-4
      :n "l" #'emms-browser-expand-one-level
      :ni "p" #'emms-browser-add-tracks-and-play
      :n "g" #'emms-browse-by-genre
      :n "a" #'emms-browse-by-artist
      :n "RET" #'emms-playlist-mode-play-smart
      :n "S-<return>" #'emms-pause
      :n "C-<return>" #'emms-stop
      :n "A" #'emms-browse-by-album))
#+end_src

** Folds
#+begin_src emacs-lisp
(add-hook! '(sh-mode-hook conf-mode-hook python-mode-hook c-mode-hook typescript-mode-hook)
    (vimish-fold-mode 1))
#+end_src

** Modus-theme
#+begin_src emacs-lisp
(setq   modus-themes-inhibit-reload nil
        modus-themes-bold-constructs t
        modus-themes-italic-constructs t
        modus-themes-syntax '(alt-syntax)
        modus-themes-mixed-fonts t
        modus-themes-links '(neutral-underline faint background italic)
        modus-themes-prompts '(intense))
#+end_src
** Emojis
#+begin_src emacs-lisp
(after! emojify
  (setq emojify-display-style 'ascii))
#+end_src

* EVIL mode

** Text objects
#+begin_src emacs-lisp
#+end_src
** Text operators
#+begin_src emacs-lisp

#+end_src
** Text motions
#+begin_src emacs-lisp
#+end_src
** Text maps
#+begin_src emacs-lisp
(evil-set-initial-state 'magit-status-mode 'normal)
(evil-set-initial-state 'pdf-view-mode 'normal)
(evil-set-initial-state 'pdf-outline-mode 'normal)
(evil-set-initial-state 'emms-playlist-mode 'normal)
#+end_src
** Preferences
#+begin_src emacs-lisp
(setq evil-ex-substitute-global t)
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src
